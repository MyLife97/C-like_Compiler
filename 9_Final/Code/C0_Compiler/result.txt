1	1	1	CONST_SYMBOL	const
2	1	7	INT_SYMBOL	int
3	1	11	IDENT	max_value_limit
4	1	27	BECOME	=
5	1	29	INT	100
6	1	32	COMMA	,
7	1	34	IDENT	min_value_limit
8	1	50	BECOME	=
9	1	52	SUB	-
10	1	53	INT	100
11	1	56	SEMICOLON	;
12	2	1	CONST_SYMBOL	const
13	2	7	CHAR_SYMBOL	char
14	2	12	IDENT	upper_c
15	2	20	BECOME	=
16	2	22	CHAR	C
17	2	25	SEMICOLON	;
18	3	1	CONST_SYMBOL	const
19	3	7	INT_SYMBOL	int
20	3	11	IDENT	const_void_index
21	4	1	BECOME	=
22	5	1	INT	5
23	6	1	SEMICOLON	;
24	7	1	CONST_SYMBOL	const
25	7	7	CHAR_SYMBOL	char
26	7	12	IDENT	lower_c
27	7	20	BECOME	=
28	7	22	CHAR	c
29	7	25	SEMICOLON	;
30	10	1	INT_SYMBOL	int
31	10	5	IDENT	error_number
32	10	17	SEMICOLON	;
33	11	1	INT_SYMBOL	int
34	11	5	IDENT	void_index
35	11	15	SEMICOLON	;
36	12	1	INT_SYMBOL	int
37	12	5	IDENT	i
38	12	6	SEMICOLON	;
39	13	1	INT_SYMBOL	int
40	13	5	IDENT	t1
41	13	7	COMMA	,
42	13	8	IDENT	t2
43	14	1	COMMA	,
44	15	1	IDENT	t3
45	16	1	SEMICOLON	;
46	17	1	CHAR_SYMBOL	char
47	17	6	IDENT	label
48	17	11	COMMA	,
49	17	13	IDENT	label1
50	17	19	COMMA	,
51	17	21	IDENT	label2
52	17	27	SEMICOLON	;
53	19	1	INT_SYMBOL	int
54	19	5	IDENT	returnyear
55	19	15	LEFT_BRACE	{
56	20	5	RETURN_SYMBOL	return
57	20	12	LEFT_PAR	(
58	20	13	SUB	-
59	20	14	SUB	-
60	20	15	INT	2017
61	20	19	SUB	-
62	20	20	SUB	-
63	20	21	INT	1
64	20	22	RIGHT_PAR	)
65	20	23	SEMICOLON	;
66	21	1	RIGHT_BRACE	}
67	23	1	INT_SYMBOL	int
68	23	5	IDENT	add
69	23	8	LEFT_PAR	(
70	23	9	INT_SYMBOL	int
71	23	13	IDENT	x
72	23	14	COMMA	,
73	23	16	INT_SYMBOL	int
74	23	20	IDENT	y
75	23	21	RIGHT_PAR	)
76	23	22	LEFT_BRACE	{
77	24	5	RETURN_SYMBOL	return
78	24	12	LEFT_PAR	(
79	24	13	PLUS	+
80	24	15	IDENT	x
81	24	17	PLUS	+
82	24	19	IDENT	y
83	24	20	RIGHT_PAR	)
84	24	21	SEMICOLON	;
85	25	1	RIGHT_BRACE	}
86	27	1	VOID_SYMBOL	void
87	27	6	IDENT	error
88	27	11	LEFT_PAR	(
89	27	12	INT_SYMBOL	int
90	27	16	IDENT	err_typ
91	27	23	RIGHT_PAR	)
92	27	24	LEFT_BRACE	{
93	28	5	SWITCH_SYMBOL	switch
94	28	11	LEFT_PAR	(
95	28	12	IDENT	err_typ
96	28	19	RIGHT_PAR	)
97	28	20	LEFT_BRACE	{
98	29	9	CASE_SYMBOL	case
99	29	14	INT	1
100	29	15	COLON	:
101	29	16	LEFT_BRACE	{
102	30	13	PRINTF_SYMBOL	printf
103	30	19	LEFT_PAR	(
104	30	20	STRING	Max value limit.
105	30	38	RIGHT_PAR	)
106	30	39	SEMICOLON	;
107	31	9	RIGHT_BRACE	}
108	32	9	CASE_SYMBOL	case
109	32	14	INT	2
110	32	15	COLON	:
111	32	16	LEFT_BRACE	{
112	33	13	PRINTF_SYMBOL	printf
113	33	19	LEFT_PAR	(
114	33	20	STRING	Min value limit.
115	33	38	RIGHT_PAR	)
116	33	39	SEMICOLON	;
117	34	9	RIGHT_BRACE	}
118	35	9	DEFAULT_SYMBOL	default
119	35	16	COLON	:
120	35	17	LEFT_BRACE	{
121	36	13	SWITCH_SYMBOL	switch
122	36	19	LEFT_PAR	(
123	36	20	IDENT	err_typ
124	36	27	RIGHT_PAR	)
125	36	28	LEFT_BRACE	{
126	37	17	CASE_SYMBOL	case
127	37	22	INT	3
128	37	23	COLON	:
129	38	21	PRINTF_SYMBOL	printf
130	38	27	LEFT_PAR	(
131	38	28	STRING	Invalid Input.
132	38	44	RIGHT_PAR	)
133	38	45	SEMICOLON	;
134	39	17	DEFAULT_SYMBOL	default
135	39	24	COLON	:
136	40	21	PRINTF_SYMBOL	printf
137	40	27	LEFT_PAR	(
138	40	28	STRING	Error Type Not Define.
139	40	52	RIGHT_PAR	)
140	40	53	SEMICOLON	;
141	41	13	RIGHT_BRACE	}
142	42	9	RIGHT_BRACE	}
143	43	5	RIGHT_BRACE	}
144	44	5	IDENT	error_number
145	44	18	BECOME	=
146	44	20	IDENT	error_number
147	44	33	PLUS	+
148	44	35	INT	1
149	44	36	SEMICOLON	;
150	45	5	RETURN_SYMBOL	return
151	45	11	SEMICOLON	;
152	46	1	RIGHT_BRACE	}
153	48	1	INT_SYMBOL	int
154	48	5	IDENT	cumulative_sum
155	48	19	LEFT_PAR	(
156	48	20	INT_SYMBOL	int
157	48	24	IDENT	x
158	48	25	COMMA	,
159	48	27	INT_SYMBOL	int
160	48	31	IDENT	y
161	48	32	RIGHT_PAR	)
162	48	33	LEFT_BRACE	{
163	49	5	CONST_SYMBOL	const
164	49	11	INT_SYMBOL	int
165	49	15	IDENT	err_max_value_limit
166	49	35	BECOME	=
167	49	37	INT	1
168	49	38	SEMICOLON	;
169	50	5	CONST_SYMBOL	const
170	50	11	INT_SYMBOL	int
171	50	15	IDENT	err_min_value_limit
172	50	35	BECOME	=
173	50	37	INT	2
174	50	38	SEMICOLON	;
175	51	5	CONST_SYMBOL	const
176	51	11	INT_SYMBOL	int
177	51	15	IDENT	err_invalid_input
178	51	33	BECOME	=
179	51	35	INT	3
180	51	36	SEMICOLON	;
181	53	5	IF_SYMBOL	if
182	53	7	LEFT_PAR	(
183	53	8	IDENT	x
184	53	10	GTR	>
185	53	12	IDENT	y
186	53	13	RIGHT_PAR	)
187	54	9	IDENT	error
188	54	14	LEFT_PAR	(
189	54	15	IDENT	err_invalid_input
190	54	32	RIGHT_PAR	)
191	54	33	SEMICOLON	;
192	55	5	ELSE_SYMBOL	else
193	56	9	IF_SYMBOL	if
194	56	11	LEFT_PAR	(
195	56	12	IDENT	y
196	56	14	GTR	>
197	56	16	IDENT	max_value_limit
198	56	31	RIGHT_PAR	)
199	57	13	IDENT	error
200	57	18	LEFT_PAR	(
201	57	19	IDENT	err_max_value_limit
202	57	38	RIGHT_PAR	)
203	57	39	SEMICOLON	;
204	58	9	ELSE_SYMBOL	else
205	59	13	IF_SYMBOL	if
206	59	15	LEFT_PAR	(
207	59	16	IDENT	x
208	59	18	LSS	<
209	59	20	IDENT	min_value_limit
210	59	35	RIGHT_PAR	)
211	60	17	IDENT	error
212	60	22	LEFT_PAR	(
213	60	23	IDENT	err_min_value_limit
214	60	42	RIGHT_PAR	)
215	60	43	SEMICOLON	;
216	61	13	ELSE_SYMBOL	else
217	62	17	IF_SYMBOL	if
218	62	19	LEFT_PAR	(
219	62	20	IDENT	x
220	62	22	SUB	-
221	62	24	IDENT	y
222	62	25	RIGHT_PAR	)
223	63	21	RETURN_SYMBOL	return
224	63	28	LEFT_PAR	(
225	63	29	IDENT	add
226	63	32	LEFT_PAR	(
227	63	33	IDENT	x
228	63	34	COMMA	,
229	63	36	IDENT	cumulative_sum
230	63	50	LEFT_PAR	(
231	63	51	IDENT	x
232	63	53	PLUS	+
233	63	55	INT	1
234	63	56	COMMA	,
235	63	58	IDENT	y
236	63	59	RIGHT_PAR	)
237	63	60	RIGHT_PAR	)
238	63	61	RIGHT_PAR	)
239	63	62	SEMICOLON	;
240	64	17	ELSE_SYMBOL	else
241	65	21	RETURN_SYMBOL	return
242	65	28	LEFT_PAR	(
243	65	29	IDENT	x
244	65	30	RIGHT_PAR	)
245	65	31	SEMICOLON	;
246	66	1	RIGHT_BRACE	}
247	70	1	CHAR_SYMBOL	char
248	70	6	IDENT	returnc
249	70	13	LEFT_BRACE	{
250	71	5	IF_SYMBOL	if
251	71	7	LEFT_PAR	(
252	71	8	IDENT	void_index
253	71	19	LSS	<
254	71	21	IDENT	const_void_index
255	71	37	RIGHT_PAR	)
256	71	38	LEFT_BRACE	{
257	72	9	IDENT	void_index
258	72	20	BECOME	=
259	72	22	IDENT	void_index
260	72	33	PLUS	+
261	72	35	INT	1
262	72	36	SEMICOLON	;
263	73	9	RETURN_SYMBOL	return
264	73	16	LEFT_PAR	(
265	73	17	IDENT	returnc
266	73	24	RIGHT_PAR	)
267	73	25	SEMICOLON	;
268	74	5	RIGHT_BRACE	}
269	75	5	ELSE_SYMBOL	else
270	76	9	RETURN_SYMBOL	return
271	76	16	LEFT_PAR	(
272	76	17	CHAR	C
273	76	20	RIGHT_PAR	)
274	76	21	SEMICOLON	;
275	77	1	RIGHT_BRACE	}
276	79	1	CHAR_SYMBOL	char
277	79	6	IDENT	output
278	79	12	LEFT_PAR	(
279	79	13	CHAR_SYMBOL	char
280	79	18	IDENT	input
281	79	23	RIGHT_PAR	)
282	79	24	LEFT_BRACE	{
283	80	5	DO_SYMBOL	do
284	80	7	LEFT_BRACE	{
285	81	9	PRINTF_SYMBOL	printf
286	81	15	LEFT_PAR	(
287	81	16	STRING	Letter is 
288	81	28	COMMA	,
289	81	30	IDENT	input
290	81	35	RIGHT_PAR	)
291	81	36	SEMICOLON	;
292	82	9	RETURN_SYMBOL	return
293	82	16	LEFT_PAR	(
294	82	17	IDENT	input
295	82	22	RIGHT_PAR	)
296	82	23	SEMICOLON	;
297	83	5	RIGHT_BRACE	}
298	83	6	WHILE_SYMBOL	while
299	83	11	LEFT_PAR	(
300	83	12	INT	1
301	83	13	RIGHT_PAR	)
302	83	14	SEMICOLON	;
303	84	1	RIGHT_BRACE	}
304	86	1	INT_SYMBOL	int
305	86	5	IDENT	register_disaster
306	86	22	LEFT_PAR	(
307	86	23	INT_SYMBOL	int
308	86	27	IDENT	t1
309	86	29	COMMA	,
310	86	31	INT_SYMBOL	int
311	86	35	IDENT	t2
312	86	37	COMMA	,
313	86	39	INT_SYMBOL	int
314	86	43	IDENT	t3
315	86	45	COMMA	,
316	86	47	INT_SYMBOL	int
317	86	51	IDENT	t4
318	86	53	COMMA	,
319	86	55	INT_SYMBOL	int
320	86	59	IDENT	t5
321	86	61	COMMA	,
322	86	63	INT_SYMBOL	int
323	86	67	IDENT	t6
324	86	69	COMMA	,
325	86	71	INT_SYMBOL	int
326	86	75	IDENT	t7
327	86	77	COMMA	,
328	86	79	INT_SYMBOL	int
329	86	83	IDENT	t8
330	86	85	COMMA	,
331	86	87	INT_SYMBOL	int
332	86	91	IDENT	t9
333	86	93	COMMA	,
334	86	95	INT_SYMBOL	int
335	86	99	IDENT	t10
336	86	102	COMMA	,
337	86	104	INT_SYMBOL	int
338	86	108	IDENT	t11
339	86	112	COMMA	,
340	86	113	INT_SYMBOL	int
341	86	117	IDENT	t12
342	86	120	RIGHT_PAR	)
343	86	121	LEFT_BRACE	{
344	87	5	IDENT	t1
345	87	8	BECOME	=
346	87	10	INT	1
347	87	11	SEMICOLON	;
348	88	5	IDENT	t2
349	88	8	BECOME	=
350	88	10	INT	1
351	88	11	SEMICOLON	;
352	89	5	IDENT	t3
353	89	8	BECOME	=
354	89	10	INT	1
355	89	11	SEMICOLON	;
356	90	5	IDENT	t4
357	90	8	BECOME	=
358	90	10	INT	1
359	90	11	SEMICOLON	;
360	91	5	IDENT	t5
361	91	8	BECOME	=
362	91	10	INT	1
363	91	11	SEMICOLON	;
364	92	5	IDENT	t6
365	92	8	BECOME	=
366	92	10	INT	1
367	92	11	SEMICOLON	;
368	93	5	IDENT	t7
369	93	8	BECOME	=
370	93	10	INT	1
371	93	11	SEMICOLON	;
372	94	5	IDENT	t8
373	94	8	BECOME	=
374	94	10	INT	1
375	94	11	SEMICOLON	;
376	95	5	IDENT	t9
377	95	8	BECOME	=
378	95	10	INT	1
379	95	11	SEMICOLON	;
380	96	5	IDENT	t10
381	96	9	BECOME	=
382	96	11	INT	1
383	96	12	SEMICOLON	;
384	97	5	IDENT	t11
385	97	9	BECOME	=
386	97	11	INT	1
387	97	12	SEMICOLON	;
388	98	5	IDENT	t12
389	98	9	BECOME	=
390	98	11	INT	1
391	98	12	SEMICOLON	;
392	99	5	RETURN_SYMBOL	return
393	99	12	LEFT_PAR	(
394	99	13	IDENT	t1
395	99	16	PLUS	+
396	99	18	IDENT	t2
397	99	21	PLUS	+
398	99	23	IDENT	t3
399	99	26	PLUS	+
400	99	28	IDENT	t4
401	99	31	PLUS	+
402	99	33	IDENT	t5
403	99	36	PLUS	+
404	99	38	IDENT	t6
405	99	41	PLUS	+
406	99	43	IDENT	t7
407	99	46	PLUS	+
408	99	48	IDENT	t8
409	99	51	PLUS	+
410	99	53	IDENT	t9
411	99	56	PLUS	+
412	99	58	IDENT	t10
413	99	62	PLUS	+
414	99	64	IDENT	t11
415	99	68	PLUS	+
416	99	70	IDENT	t12
417	99	73	RIGHT_PAR	)
418	99	74	SEMICOLON	;
419	100	1	RIGHT_BRACE	}
420	102	1	VOID_SYMBOL	void
421	102	6	IDENT	warning
422	102	13	LEFT_BRACE	{
423	104	1	RIGHT_BRACE	}
424	106	1	VOID_SYMBOL	void
425	106	6	IDENT	test
426	106	10	LEFT_BRACE	{
427	107	5	INT_SYMBOL	int
428	107	9	IDENT	int_test
429	107	17	SEMICOLON	;
430	108	5	CHAR_SYMBOL	char
431	108	10	IDENT	char_test
432	108	19	SEMICOLON	;
433	109	5	INT_SYMBOL	int
434	109	9	IDENT	_abcdefghijklmnopqrstuvwxyz0123456789
435	109	46	SEMICOLON	;
436	110	5	CHAR_SYMBOL	char
437	110	10	IDENT	letters
438	110	17	LEFT_BRACKET	[
439	110	18	INT	3
440	110	21	RIGHT_BRACKET	]
441	110	22	SEMICOLON	;
442	111	5	INT_SYMBOL	int
443	111	9	IDENT	i
444	111	10	SEMICOLON	;
445	113	5	IDENT	char_test
446	113	15	BECOME	=
447	113	17	CHAR	A
448	113	20	SEMICOLON	;
449	114	5	IDENT	letters
450	114	12	LEFT_BRACKET	[
451	114	13	INT	0
452	114	14	RIGHT_BRACKET	]
453	114	16	BECOME	=
454	114	18	CHAR	1
455	114	21	SEMICOLON	;
456	115	5	IDENT	letters
457	115	12	LEFT_BRACKET	[
458	115	13	INT	1
459	115	14	RIGHT_BRACKET	]
460	115	16	BECOME	=
461	115	18	CHAR	2
462	115	21	SEMICOLON	;
463	116	5	IDENT	letters
464	116	12	LEFT_BRACKET	[
465	116	13	INT	2
466	116	14	RIGHT_BRACKET	]
467	116	16	BECOME	=
468	116	18	CHAR	a
469	116	21	SEMICOLON	;
470	117	5	IDENT	i
471	117	7	BECOME	=
472	117	9	INT	10
473	117	11	SEMICOLON	;
474	119	5	SWITCH_SYMBOL	switch
475	119	11	LEFT_PAR	(
476	119	12	IDENT	char_test
477	119	21	RIGHT_PAR	)
478	119	22	LEFT_BRACE	{
479	120	9	CASE_SYMBOL	case
480	120	14	CHAR	A
481	120	17	COLON	:
482	121	9	DO_SYMBOL	do
483	121	11	LEFT_BRACE	{
484	122	13	IDENT	int_test
485	122	22	BECOME	=
486	122	24	INT	133
487	122	28	SUB	-
488	122	30	INT	1
489	122	32	MULT	*
490	122	34	INT	2
491	122	36	MULT	*
492	122	38	INT	3
493	122	40	DIV	/
494	122	42	LEFT_PAR	(
495	122	43	INT	4
496	122	45	SUB	-
497	122	47	INT	1
498	122	48	RIGHT_PAR	)
499	122	50	PLUS	+
500	122	52	IDENT	char_test
501	122	62	PLUS	+
502	122	64	IDENT	letters
503	122	71	LEFT_BRACKET	[
504	122	72	INT	1
505	122	73	RIGHT_BRACKET	]
506	122	75	SUB	-
507	122	77	IDENT	letters
508	122	84	LEFT_BRACKET	[
509	122	85	INT	0
510	122	86	RIGHT_BRACKET	]
511	122	88	SUB	-
512	122	90	IDENT	letters
513	122	97	LEFT_BRACKET	[
514	122	98	INT	2
515	122	99	RIGHT_BRACKET	]
516	122	101	PLUS	+
517	122	103	IDENT	i
518	122	105	MULT	*
519	122	107	LEFT_PAR	(
520	122	108	INT	1
521	122	109	RIGHT_PAR	)
522	122	111	PLUS	+
523	122	113	INT	2
524	122	115	DIV	/
525	122	117	INT	3
526	122	118	SEMICOLON	;
527	123	13	IDENT	i
528	123	15	BECOME	=
529	123	17	IDENT	i
530	123	19	SUB	-
531	123	21	INT	1
532	123	22	SEMICOLON	;
533	124	9	RIGHT_BRACE	}
534	124	10	WHILE_SYMBOL	while
535	124	15	LEFT_PAR	(
536	124	16	IDENT	i
537	124	18	GTREQL	>=
538	124	21	INT	0
539	124	22	RIGHT_PAR	)
540	126	9	CASE_SYMBOL	case
541	126	14	CHAR	a
542	126	17	COLON	:
543	127	9	IDENT	int_test
544	127	18	BECOME	=
545	127	20	INT	223
546	127	24	SUB	-
547	127	26	INT	1
548	127	28	MULT	*
549	127	30	INT	2
550	127	32	MULT	*
551	127	34	INT	3
552	127	36	DIV	/
553	127	38	LEFT_PAR	(
554	127	39	INT	4
555	127	41	SUB	-
556	127	43	INT	1
557	127	44	RIGHT_PAR	)
558	127	46	PLUS	+
559	127	48	IDENT	char_test
560	127	58	PLUS	+
561	127	60	IDENT	letters
562	127	67	LEFT_BRACKET	[
563	127	68	INT	1
564	127	69	RIGHT_BRACKET	]
565	127	71	SUB	-
566	127	73	IDENT	letters
567	127	80	LEFT_BRACKET	[
568	127	81	INT	0
569	127	82	RIGHT_BRACKET	]
570	127	84	SUB	-
571	127	86	IDENT	letters
572	127	93	LEFT_BRACKET	[
573	127	94	INT	2
574	127	95	RIGHT_BRACKET	]
575	127	97	PLUS	+
576	127	99	IDENT	i
577	127	101	MULT	*
578	127	103	LEFT_PAR	(
579	127	104	INT	1
580	127	105	RIGHT_PAR	)
581	127	106	SEMICOLON	;
582	129	9	DEFAULT_SYMBOL	default
583	129	16	COLON	:
584	130	9	IDENT	int_test
585	130	18	BECOME	=
586	130	20	SUB	-
587	130	21	INT	1
588	130	22	SEMICOLON	;
589	131	5	RIGHT_BRACE	}
590	133	5	PRINTF_SYMBOL	printf
591	133	11	LEFT_PAR	(
592	133	12	STRING	
593	133	14	RIGHT_PAR	)
594	133	15	SEMICOLON	;
595	134	5	PRINTF_SYMBOL	printf
596	134	11	LEFT_PAR	(
597	134	12	STRING	Complex Expression = 
598	134	35	COMMA	,
599	134	37	IDENT	int_test
600	134	45	RIGHT_PAR	)
601	134	46	SEMICOLON	;
602	136	5	IDENT	i
603	136	7	BECOME	=
604	136	9	INT	10
605	136	11	SEMICOLON	;
606	137	5	DO_SYMBOL	do
607	137	7	LEFT_BRACE	{
608	138	9	IF_SYMBOL	if
609	138	11	LEFT_PAR	(
610	138	12	IDENT	i
611	138	14	GTREQL	>=
612	138	17	INT	5
613	138	18	RIGHT_PAR	)
614	139	13	SWITCH_SYMBOL	switch
615	139	19	LEFT_PAR	(
616	139	20	IDENT	i
617	139	21	RIGHT_PAR	)
618	139	22	LEFT_BRACE	{
619	140	17	CASE_SYMBOL	case
620	140	22	INT	10
621	140	24	COLON	:
622	141	17	IDENT	char_test
623	141	27	BECOME	=
624	141	29	CHAR	A
625	141	32	SEMICOLON	;
626	142	17	CASE_SYMBOL	case
627	142	22	CHAR	9
628	142	25	COLON	:
629	143	17	IDENT	char_test
630	143	27	BECOME	=
631	143	29	CHAR	B
632	143	32	SEMICOLON	;
633	144	17	CASE_SYMBOL	case
634	144	22	INT	8
635	144	23	COLON	:
636	145	17	IDENT	char_test
637	145	27	BECOME	=
638	145	29	CHAR	C
639	145	32	SEMICOLON	;
640	146	17	CASE_SYMBOL	case
641	146	22	CHAR	7
642	146	25	COLON	:
643	147	17	IDENT	char_test
644	147	27	BECOME	=
645	147	29	CHAR	D
646	147	32	SEMICOLON	;
647	148	17	CASE_SYMBOL	case
648	148	22	INT	6
649	148	23	COLON	:
650	149	17	IDENT	char_test
651	149	27	BECOME	=
652	149	29	CHAR	E
653	149	32	SEMICOLON	;
654	150	17	DEFAULT_SYMBOL	default
655	150	24	COLON	:
656	151	17	IDENT	char_test
657	151	27	BECOME	=
658	151	29	CHAR	F
659	151	32	SEMICOLON	;
660	152	13	RIGHT_BRACE	}
661	153	9	ELSE_SYMBOL	else
662	154	13	SWITCH_SYMBOL	switch
663	154	19	LEFT_PAR	(
664	154	20	INT	2
665	154	22	MULT	*
666	154	24	IDENT	i
667	154	26	DIV	/
668	154	28	INT	2
669	154	30	PLUS	+
670	154	32	CHAR	0
671	154	36	SUB	-
672	154	38	INT	0
673	154	39	RIGHT_PAR	)
674	154	40	LEFT_BRACE	{
675	155	17	CASE_SYMBOL	case
676	155	22	INT	0
677	155	23	COLON	:
678	156	17	IDENT	char_test
679	156	27	BECOME	=
680	156	29	CHAR	A
681	156	32	SEMICOLON	;
682	157	17	CASE_SYMBOL	case
683	157	22	CHAR	0
684	157	25	COLON	:
685	158	17	IDENT	char_test
686	158	27	BECOME	=
687	158	29	CHAR	0
688	158	32	SEMICOLON	;
689	159	17	DEFAULT_SYMBOL	default
690	159	24	COLON	:
691	160	17	IDENT	char_test
692	160	27	BECOME	=
693	160	29	CHAR	G
694	160	32	SEMICOLON	;
695	161	13	RIGHT_BRACE	}
696	162	9	IDENT	i
697	162	11	BECOME	=
698	162	13	IDENT	i
699	162	15	SUB	-
700	162	17	INT	1
701	162	18	SEMICOLON	;
702	163	5	RIGHT_BRACE	}
703	163	6	WHILE_SYMBOL	while
704	163	11	LEFT_PAR	(
705	163	12	IDENT	i
706	163	14	GTREQL	>=
707	163	17	INT	0
708	163	18	RIGHT_PAR	)
709	165	5	IDENT	output
710	165	11	LEFT_PAR	(
711	165	12	IDENT	char_test
712	165	21	RIGHT_PAR	)
713	165	22	SEMICOLON	;
714	167	5	SEMICOLON	;
715	168	5	LEFT_BRACE	{
716	168	6	LEFT_BRACE	{
717	168	7	RIGHT_BRACE	}
718	168	8	LEFT_BRACE	{
719	168	9	RIGHT_BRACE	}
720	168	10	LEFT_BRACE	{
721	168	11	SEMICOLON	;
722	168	12	RIGHT_BRACE	}
723	168	13	RIGHT_BRACE	}
724	169	5	LEFT_BRACE	{
725	169	6	RIGHT_BRACE	}
726	170	5	LEFT_BRACE	{
727	170	6	SEMICOLON	;
728	170	7	LEFT_BRACE	{
729	170	8	SEMICOLON	;
730	170	9	RIGHT_BRACE	}
731	170	10	SEMICOLON	;
732	170	11	RIGHT_BRACE	}
733	172	5	IDENT	error
734	172	10	LEFT_PAR	(
735	172	11	INT	4
736	172	12	RIGHT_PAR	)
737	172	13	SEMICOLON	;
738	173	1	RIGHT_BRACE	}
739	175	1	VOID_SYMBOL	void
740	175	6	MAIN_SYMBOL	main
741	175	10	LEFT_PAR	(
742	175	11	RIGHT_PAR	)
743	176	1	LEFT_BRACE	{
744	177	5	INT_SYMBOL	int
745	177	9	IDENT	x
746	177	10	COMMA	,
747	177	11	IDENT	y
748	177	12	SEMICOLON	;
749	178	5	CHAR_SYMBOL	char
750	178	10	IDENT	input
751	178	15	SEMICOLON	;
752	179	5	CHAR_SYMBOL	char
753	179	10	IDENT	c
754	179	11	SEMICOLON	;
755	180	5	INT_SYMBOL	int
756	180	9	IDENT	result
757	180	15	LEFT_BRACKET	[
758	180	16	INT	200
759	180	19	RIGHT_BRACKET	]
760	180	20	SEMICOLON	;
761	182	5	INT_SYMBOL	int
762	182	9	IDENT	a
763	182	10	LEFT_BRACKET	[
764	182	11	INT	2
765	182	12	RIGHT_BRACKET	]
766	182	13	SEMICOLON	;
767	184	5	IDENT	a
768	184	6	LEFT_BRACKET	[
769	184	7	INT	1
770	184	8	RIGHT_BRACKET	]
771	184	10	BECOME	=
772	184	12	INT	0
773	184	13	SEMICOLON	;
774	186	5	IDENT	t1
775	186	8	BECOME	=
776	186	10	INT	1
777	186	11	SEMICOLON	;
778	187	5	IDENT	t2
779	187	8	BECOME	=
780	187	10	INT	2
781	187	11	SEMICOLON	;
782	188	5	IDENT	label
783	188	11	BECOME	=
784	188	13	CHAR	0
785	188	16	SEMICOLON	;
786	189	5	IDENT	label1
787	189	12	BECOME	=
788	189	14	CHAR	1
789	189	17	SEMICOLON	;
790	190	5	IDENT	label2
791	190	12	BECOME	=
792	190	14	CHAR	2
793	190	17	SEMICOLON	;
794	193	5	PRINTF_SYMBOL	printf
795	193	11	LEFT_PAR	(
796	193	12	STRING	Please Input Lower Bound and Upper Bound:
797	193	55	RIGHT_PAR	)
798	193	56	SEMICOLON	;
799	194	5	SCANF_SYMBOL	scanf
800	194	10	LEFT_PAR	(
801	194	11	IDENT	x
802	194	12	COMMA	,
803	194	13	IDENT	y
804	194	14	RIGHT_PAR	)
805	194	15	SEMICOLON	;
806	196	5	PRINTF_SYMBOL	printf
807	196	11	LEFT_PAR	(
808	196	12	STRING	Please Input A Char:
809	196	34	RIGHT_PAR	)
810	196	35	SEMICOLON	;
811	197	5	SCANF_SYMBOL	scanf
812	197	10	LEFT_PAR	(
813	197	11	IDENT	input
814	197	16	RIGHT_PAR	)
815	197	17	SEMICOLON	;
816	199	5	IDENT	i
817	199	7	BECOME	=
818	199	9	INT	0
819	199	10	SEMICOLON	;
820	201	5	DO_SYMBOL	do
821	202	9	IDENT	result
822	202	15	LEFT_BRACKET	[
823	202	16	IDENT	i
824	202	18	MULT	*
825	202	20	INT	1
826	202	22	SUB	-
827	202	24	INT	1
828	202	26	PLUS	+
829	202	28	INT	1
830	202	30	DIV	/
831	202	32	INT	1
832	202	33	RIGHT_BRACKET	]
833	202	35	BECOME	=
834	202	37	IDENT	cumulative_sum
835	202	51	LEFT_PAR	(
836	202	52	IDENT	x
837	202	53	COMMA	,
838	202	54	IDENT	y
839	202	55	RIGHT_PAR	)
840	202	56	SEMICOLON	;
841	203	5	WHILE_SYMBOL	while
842	203	10	LEFT_PAR	(
843	203	11	INT	0
844	203	12	RIGHT_PAR	)
845	205	5	IDENT	i
846	205	7	BECOME	=
847	205	9	INT	1
848	205	10	SEMICOLON	;
849	206	5	DO_SYMBOL	do
850	206	7	LEFT_BRACE	{
851	207	9	IDENT	result
852	207	15	LEFT_BRACKET	[
853	207	16	IDENT	i
854	207	17	RIGHT_BRACKET	]
855	207	19	BECOME	=
856	207	21	IDENT	i
857	207	22	SEMICOLON	;
858	208	9	IDENT	i
859	208	11	BECOME	=
860	208	13	IDENT	i
861	208	15	PLUS	+
862	208	17	INT	1
863	208	18	SEMICOLON	;
864	209	5	RIGHT_BRACE	}
865	209	6	WHILE_SYMBOL	while
866	209	11	LEFT_PAR	(
867	209	12	IDENT	i
868	209	14	LSS	<
869	209	16	IDENT	y
870	209	18	SUB	-
871	209	20	IDENT	x
872	209	21	RIGHT_PAR	)
873	211	5	IDENT	i
874	211	7	BECOME	=
875	211	9	INT	1
876	211	10	SEMICOLON	;
877	213	5	IF_SYMBOL	if
878	213	7	LEFT_PAR	(
879	213	8	IDENT	x
880	213	10	GTREQL	>=
881	213	13	SUB	-
882	213	14	INT	100
883	213	17	RIGHT_PAR	)
884	213	18	LEFT_BRACE	{
885	214	9	IF_SYMBOL	if
886	214	11	LEFT_PAR	(
887	214	12	IDENT	y
888	214	14	LSSEQL	<=
889	214	17	INT	100
890	214	20	RIGHT_PAR	)
891	214	21	LEFT_BRACE	{
892	215	13	IF_SYMBOL	if
893	215	15	LEFT_PAR	(
894	215	16	IDENT	x
895	215	18	LSSEQL	<=
896	215	21	IDENT	y
897	215	22	RIGHT_PAR	)
898	215	23	LEFT_BRACE	{
899	216	17	PRINTF_SYMBOL	printf
900	216	23	LEFT_PAR	(
901	216	24	STRING	X sum to Y = 
902	216	39	COMMA	,
903	216	41	IDENT	result
904	216	47	LEFT_BRACKET	[
905	216	48	INT	0
906	216	49	RIGHT_BRACKET	]
907	216	50	RIGHT_PAR	)
908	216	51	SEMICOLON	;
909	217	13	RIGHT_BRACE	}
910	218	13	ELSE_SYMBOL	else
911	219	17	SEMICOLON	;
912	220	9	RIGHT_BRACE	}
913	221	9	ELSE_SYMBOL	else
914	222	13	SEMICOLON	;
915	223	5	RIGHT_BRACE	}
916	224	5	ELSE_SYMBOL	else
917	225	9	SEMICOLON	;
918	227	5	PRINTF_SYMBOL	printf
919	227	11	LEFT_PAR	(
920	227	12	STRING	It's already 
921	227	27	COMMA	,
922	227	29	IDENT	returnyear
923	227	39	RIGHT_PAR	)
924	227	40	SEMICOLON	;
925	229	5	IDENT	c
926	229	7	BECOME	=
927	229	9	IDENT	output
928	229	15	LEFT_PAR	(
929	229	16	IDENT	input
930	229	21	RIGHT_PAR	)
931	229	22	SEMICOLON	;
932	230	5	IF_SYMBOL	if
933	230	7	LEFT_PAR	(
934	230	8	LEFT_PAR	(
935	230	9	IDENT	c
936	230	10	RIGHT_PAR	)
937	230	12	EQLEQL	==
938	230	15	LEFT_PAR	(
939	230	16	CHAR	c
940	230	19	RIGHT_PAR	)
941	230	20	RIGHT_PAR	)
942	231	9	PRINTF_SYMBOL	printf
943	231	15	LEFT_PAR	(
944	231	16	STRING	It is Lower c.
945	231	32	COMMA	,
946	231	34	IDENT	t1
947	231	36	RIGHT_PAR	)
948	231	37	SEMICOLON	;
949	232	5	ELSE_SYMBOL	else
950	233	9	PRINTF_SYMBOL	printf
951	233	15	LEFT_PAR	(
952	233	16	STRING	It is not Lower c
953	233	35	COMMA	,
954	233	37	IDENT	t2
955	233	39	RIGHT_PAR	)
956	233	40	SEMICOLON	;
957	235	5	IDENT	c
958	235	7	BECOME	=
959	235	9	IDENT	returnc
960	235	16	SEMICOLON	;
961	236	5	IF_SYMBOL	if
962	236	7	LEFT_PAR	(
963	236	8	IDENT	c
964	236	10	PLUS	+
965	236	12	INT	0
966	236	14	EQLEQL	==
967	236	17	CHAR	C
968	236	21	PLUS	+
969	236	23	INT	0
970	236	24	RIGHT_PAR	)
971	237	9	PRINTF_SYMBOL	printf
972	237	15	LEFT_PAR	(
973	237	16	STRING	\\tReturnC is Upper C.\\n
974	237	41	RIGHT_PAR	)
975	237	42	SEMICOLON	;
976	238	5	ELSE_SYMBOL	else
977	239	9	PRINTF_SYMBOL	printf
978	239	15	LEFT_PAR	(
979	239	16	STRING	ReturnC is not Upper C
980	239	40	RIGHT_PAR	)
981	239	41	SEMICOLON	;
982	241	5	IDENT	warning
983	241	12	SEMICOLON	;
984	242	5	IDENT	test
985	242	9	SEMICOLON	;
986	243	5	PRINTF_SYMBOL	printf
987	243	11	LEFT_PAR	(
988	243	12	STRING	Final i = 
989	243	24	COMMA	,
990	243	26	IDENT	i
991	243	27	RIGHT_PAR	)
992	243	28	SEMICOLON	;
993	244	5	PRINTF_SYMBOL	printf
994	244	11	LEFT_PAR	(
995	244	12	STRING	Register_Disater = 
996	244	33	COMMA	,
997	244	35	IDENT	register_disaster
998	244	52	LEFT_PAR	(
999	244	53	INT	0
1000	244	54	COMMA	,
1001	244	55	INT	0
1002	244	56	COMMA	,
1003	244	57	INT	0
1004	244	58	COMMA	,
1005	244	59	INT	0
1006	244	60	COMMA	,
1007	244	61	INT	0
1008	244	62	COMMA	,
1009	244	63	INT	0
1010	244	64	COMMA	,
1011	244	65	INT	0
1012	244	66	COMMA	,
1013	244	67	INT	0
1014	244	68	COMMA	,
1015	244	69	INT	0
1016	244	70	COMMA	,
1017	244	71	INT	0
1018	244	72	COMMA	,
1019	244	73	INT	0
1020	244	74	COMMA	,
1021	244	75	INT	0
1022	244	76	RIGHT_PAR	)
1023	244	77	RIGHT_PAR	)
1024	244	78	SEMICOLON	;
1025	245	1	RIGHT_BRACE	}
